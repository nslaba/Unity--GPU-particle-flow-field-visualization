// This shader handles the particles. It reads the vector field data and updates the positions 
// movements of the particles based on the vector field data
#pragma kernel UpdateParticles

struct Particle {
    float3 positionCur;
    float3 positionPrev;
    float3 positionNew;
    float3 velocity;
    float3 accelaration;
    float4 color;
    float3 force;
    float mass;
    float lifetime;
};



// Initialize the vector field that will share data with the CircularField compute shader :)
RWTexture2D<float4> _ForceField; // stores 4 floats per pixel
uniform float2 _ForceFieldSize;
RWStructuredBuffer<Particle> particles;


// Variables from the CPU
float deltaTime;
float2 mousePosition;

void IntegrateEuler(uint3 threadID)
{
    Particle p = particles[threadID.x];
    float3 posCur = p.positionCur;
    float3 posPrev = p.positionPrev;
    float3 posNew = p.positionNew;
    float3 vel = p.velocity;
    float3 acc = p.accelaration;
    float4 color = p.color;
    float3 force = p.force; // Force will be computed by the vector field
    float mass = p.mass;
    float lifetime = p.lifetime - deltaTime;

    /* Step 1: update force based on force field */
    // 1) a. sample the force field based on posCur
    // Convert the particle position to texture coordinates
    float2 texCoords = posCur.xy / float2(_ForceFieldSize.xy);

    // 1) c. Update force & Sample the force field texture
    force = _ForceField.Load(int3(texCoords.xy, 1.0));

    /* Step 2: calculate accelaration*/
    acc = force / mass;
    /* Step 3: update velocity and position based on euler*/
    posNew = posCur + deltaTime * vel;
    vel = vel + deltaTime * acc;

    /* Step 4: since particles are independent, update positions right away*/
    p.positionPrev = posCur;
	p.positionCur = posNew;

    /* Step 5: write data back to particle buffer*/
    
    p.velocity = vel;
    p.accelaration = acc;
    p.color = color;
    p.force = force;
    p.mass = mass;
    p.lifetime = lifetime; 
    particles[threadID.x] = p;

}

void IntegrateVerlet(uint3 threadID)
{
    Particle p = particles[threadID.x];
    float3 posCur = p.positionCur;
    float3 posPrev = p.positionPrev;
    float3 posNew = p.positionNew;
    float3 vel = p.velocity;
    float3 acc = p.accelaration;
    float4 color = p.color;
    float3 force = p.force; // Force will be computed by the vector field
    float mass = p.mass;
    float lifetime = p.lifetime - deltaTime;

    /* Step 1: update force based on force field*/
    // 1) a. sample the force field based on posCur
    // Convert the particle position to texture coordinates
    float2 texCoords = posCur.xy / float2(_ForceFieldSize.xy);

    // 1) c. Update force & Sample the force field texture
    force = _ForceField.Load(int3(texCoords.xy, 1.0));

    /* Step 2: calculate accelaration*/
    acc = force / mass;

    /* Step 3: update velocity and position based on verlet*/
    vel = ((posNew - posPrev) / (2.0 * deltaTime));
    posNew = 2.0* posCur - posPrev + acc * pow(deltaTime, 2.0);

    /* Step 4: since particles are independent, update positions right away*/
    p.positionPrev = posCur;
	p.positionCur = posNew;

    /* Step 5: write data back to particle buffer*/
    p.velocity = vel;
    p.accelaration = acc;
    p.color = color;
    p.force = force;
    p.mass = mass;
    p.lifetime = lifetime; 
    particles[threadID.x] = p;
}


[numthreads(256, 1, 1)]
void UpdateParticles(uint3 id: SV_DispatchThreadID) {

    IntegrateEuler(id);
    //IntegrateVerlet(id);
    

    // // Deal with mouse
    // float3 delta = float3(mousePosition.xy, 3) - particles[id.x].positionCur;
    // float3 direction = normalize(delta);

    // vel += float3(texel.xy, 0.0) * direction * deltaTime;

}
